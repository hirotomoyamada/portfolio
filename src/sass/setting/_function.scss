// _config で設定されたレスポンシブ(横幅)の値を返す
@function responsive-width($width) {
  @return map-get($responsive-width, $width);
}

// _config で設定されたレスポンシブ(縦幅)の値を返す
@function responsive-height($height) {
  @return map-get($responsive-height, $height);
}

// 単位が付いている値から単位を取る
@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

// px を vw へ変換する
@function pxTovw($px) {
  @return ($px / $width * 100) + vw;
}

// rem から vw へ変換する
@function remTovw($rem) {
  $remVal: (($rem * 10) / 1rem);
  @return (($remVal / ($width / 1px)) * 100) + vw;
}

// px を vh へ変換する
@function pxTovh($px) {
  @return ($px / $height * 100) + vh;
}

// rem から vh へ変換する
@function remTovh($rem) {
  $remVal: (($rem * 10) / 1rem);
  @return (($remVal / ($height / 1px)) * 100) + vh;
}

// px または rem を vw へ変換し、min関数へ当て込む
@function auto-min($min) {
  @if str-slice(string($min), -3, -2) == "px" {
    $minVal: unquote('min(')pxTovw($min),$min unquote(')');
    @return $minVal;
  } @else {
    $minVal: unquote("min(")remTovw($min), $min unquote(")");
    @return $minVal;
  }
}

// px または rem を vw へ変換し、max関数へ当て込む
@function auto-max($max) {
  @if str-slice(string($max), -3, -2) == "px" {
    $maxVal: unquote("max(")pxTovw($max), $max unquote(")");
    @return $maxVal;
  } @else {
    $maxVal: unquote("max(")remTovw($max), $max unquote(")");
    @return $maxVal;
  }
}

// px または rem を vw へ変換し、clamp関数へ当て込む
@function auto-clamp($min, $max) {
  @if str-slice(string($min), -3, -2) and str-slice(string($max), -3, -2) == "px" {
    $clamp: clamp($min, pxTovw($max), $max);
    @return $clamp;
  } @else {
    $clamp: clamp($min, remTovw($max), $max);
    @return $clamp;
  }
}

// px または rem を vw へ変換し、最小値を割合で計算、clamp関数へ当て込む
@function rate-clamp($max, $rate) {
  @if str-slice(string($max), -3, -2) == "px" {
    $clamp: clamp(($max * $rate), pxTovw($max), $max);
    @return $clamp;
  } @else {
    $clamp: clamp(($max * $rate), remTovw($max), $max);
    @return $clamp;
  }
}